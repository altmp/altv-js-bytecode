name: Build & deploy
on:
  push:
    branches-ignore:
      - '**'
    tags:
      - 'dev/*.*-dev*'
      - 'rc/*.*-rc*'
      - 'release/*.*'

jobs:
  build-windows:
    name: Build windows
    runs-on: windows-2019
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Build
        shell: cmd
        run: build.bat

      - name: Upload module dll
        uses: actions/upload-artifact@v2
        with:
          name: bytecode-module-windows-dll
          path: ./BUILD/bin/module/js-bytecode-module.dll

      - name: Upload module pdb
        uses: actions/upload-artifact@v2
        with:
          name: bytecode-module-windows-pdb
          path: ./BUILD/bin/module/js-bytecode-module.pdb


  build-linux:
    name: Build linux
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Clang
        run: |
          sudo apt update
          sudo apt install clang-6.0

      - name: Build
        run: |
          export CXX=/usr/bin/clang++-6.0
          ./build.sh

      - name: Upload module so
        uses: actions/upload-artifact@v2
        with:
          name: bytecode-module-linux-so
          path: ./BUILD/module/libjs-bytecode-module.so

  deploy:
    name: Deploy
    runs-on: ubuntu-18.04
    needs: [build-linux, build-windows]
    steps:
      - name: Download windows module dll
        uses: actions/download-artifact@v2
        with:
          name: bytecode-module-windows-dll
          path: dist-windows

      - name: Download windows module pdb
        uses: actions/download-artifact@v2
        with:
          name: bytecode-module-windows-pdb
          path: dist

      - name: Download linux module so
        uses: actions/download-artifact@v2
        with:
          name: bytecode-module-linux-so
          path: dist-linux

      - name: Extract version
        id: version
        shell: bash
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=BRANCH::${TAG/\/*}
          echo ::set-output name=VERSION::${TAG/*\/}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.VERSION }}

      - name: Upload windows module dll
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist-windows/js-bytecode-module.dll
          asset_name: js-bytecode-module.dll
          asset_content_type: application/octet-stream

      - name: Upload windows module pdb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/js-bytecode-module.pdb
          asset_name: js-bytecode-module.pdb
          asset_content_type: application/octet-stream

      - name: Upload linux module so
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist-linux/libjs-bytecode-module.so
          asset_name: libjs-bytecode-module.so
          asset_content_type: application/octet-stream

      - name: Install CDN upload tool
        run: npm i @altmp/upload-tool@latest

      - name: Upload windows files to CDN
        run: npx alt-upload dist-windows js-bytecode-module/$BRANCH/x64_win32 $VERSION
        env:
          CI_UPLOAD_URL: ${{ secrets.CI_UPLOAD_URL }}
          CI_DEPLOY_TOKEN: ${{ secrets.CI_DEPLOY_TOKEN }}
          BRANCH: ${{ steps.version.outputs.BRANCH }}
          VERSION: ${{ steps.version.outputs.VERSION }}

      - name: Upload linux files to CDN
        run: npx alt-upload dist-linux js-bytecode-module/$BRANCH/x64_linux $VERSION
        env:
          CI_UPLOAD_URL: ${{ secrets.CI_UPLOAD_URL }}
          CI_DEPLOY_TOKEN: ${{ secrets.CI_DEPLOY_TOKEN }}
          BRANCH: ${{ steps.version.outputs.BRANCH }}
          VERSION: ${{ steps.version.outputs.VERSION }}

  delete-artifacts:
    name: Delete artifacts
    runs-on: ubuntu-18.04
    needs: [deploy]
    if: ${{ always() }}
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            bytecode-module-windows-dll
            bytecode-module-windows-pdb
            bytecode-module-linux-so
